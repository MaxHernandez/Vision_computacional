#! /usr/bin/python
from time import time
from sys import argv
from math import fabs
from PIL import Image, ImageOps, ImageDraw
from subprocess import call

def horizontal_histogram(image, output = 'horizontal.dat'):
    hist = list()
    pic = image.load()
    fl = open(output, 'w')

    for x in range(image.size[0]):
        suma = 0
        for y in range(image.size[1]):
            suma += pic[x, y]
        fl.write(str(x)+' '+str(suma)+'\n')
        hist.append(suma)

    fl.close()
    return hist

def vertical_histogram(image, output = 'vertical.dat'):
    hist = list()
    pic = image.load()
    fl = open(output, 'w')

    for y in range(image.size[1]):
        suma = 0
        for x in range(image.size[0]):
            suma += pic[x, y]
        fl.write(str(y)+' '+str(suma)+'\n')
        hist.append(suma)

    fl.close()
    return hist

def median_filter(image):
    pic = image.load()
    pic_copy = (image.copy()).load()

    for i in range(image.size[0]):
        for j in range(image.size[1]):

            temp = []
            for h in range(i-1, i+2):
                for l in range(j-1, j+2):
                    if h >= 0 and l >= 0 and h < image.size[0] and l < image.size[1]:
                        temp.append(pic_copy[h, l])
            temp.sort()
            pic[i,j] = int(temp[int(len(temp)/2)])
    return pic

def find_local_minimums(histogram):
    cosa = list()
    for i in range(1, len(histogram)-1):
        if histogram[i-1] > histogram[i] and histogram[i+1] > histogram[i]:
            #print histogram[i-1], histogram[i], histogram[i+1] 
            yield i

pat = [[1.6756756756756757, 1.6756756756756757, 1.6756756756756757, 1.6621621621621621, 1.6621621621621621, 1.6486486486486487, 1.6621621621621621, 1.6486486486486487, 1.6486486486486487, 1.6621621621621621, 1.6486486486486487], [1.6756756756756757, 1.6621621621621621, 1.6081081081081081, 1.5, 1.4324324324324325, 1.4324324324324325, 1.5, 1.6081081081081081, 1.6486486486486487, 1.6621621621621621, 1.6486486486486487], [1.6621621621621621, 1.6081081081081081, 1.3918918918918919, 1.0810810810810811, 1.0675675675675675, 1.0945945945945945, 1.4189189189189189, 1.5, 1.6081081081081081, 1.6621621621621621, 1.6486486486486487], [1.6486486486486487, 1.3918918918918919, 1.0810810810810811, 1.027027027027027, 1.0, 1.0405405405405406, 1.0945945945945945, 1.4459459459459461, 1.6486486486486487, 1.6621621621621621, 1.6486486486486487], [1.6486486486486487, 1.2837837837837838, 1.027027027027027, 1.0, 1.0, 1.0, 1.0675675675675675, 1.4459459459459461, 1.6486486486486487, 1.6621621621621621, 1.6486486486486487], [1.6756756756756757, 1.2837837837837838, 1.027027027027027, 1.0135135135135136, 1.0135135135135136, 1.0135135135135136, 1.0675675675675675, 1.5135135135135136, 1.6621621621621621, 1.6621621621621621, 1.6486486486486487], [1.6756756756756757, 1.5945945945945945, 1.2837837837837838, 1.027027027027027, 1.027027027027027, 1.0675675675675675, 1.4594594594594594, 1.6486486486486487, 1.6621621621621621, 1.6621621621621621, 1.6486486486486487], [1.7027027027027026, 1.7027027027027026, 1.5945945945945945, 1.3378378378378379, 1.3378378378378379, 1.4594594594594594, 1.6621621621621621, 1.6621621621621621, 1.6621621621621621, 1.6621621621621621, 1.6486486486486487], [1.7027027027027026, 1.6891891891891893, 1.6891891891891893, 1.6756756756756757, 1.6756756756756757, 1.6756756756756757, 1.6621621621621621, 1.6621621621621621, 1.6621621621621621, 1.6486486486486487, 1.6486486486486487], [1.6891891891891893, 1.6891891891891893, 1.6891891891891893, 1.6891891891891893, 1.6891891891891893, 1.6756756756756757, 1.6756756756756757, 1.6621621621621621, 1.6621621621621621, 1.6621621621621621, 1.6486486486486487], [1.6891891891891893, 1.6891891891891893, 1.6891891891891893, 1.6891891891891893, 1.6891891891891893, 1.6756756756756757, 1.6756756756756757, 1.6621621621621621, 1.6621621621621621, 1.6621621621621621, 1.6486486486486487]]

def compare(pat, finded):
    diff = 0.0
    unit = finded[0][0]/pat[0][0]
    for y in range(len(pat)):
        for x in range(len(pat[0])):
            diff += fabs( (finded[x][y]/unit) - pat[x][y])
    print diff
    return diff

def hole_detection(image_name, output="output.png", size=(128, 128)):
    image = Image.open(image_name)
    original_image = image.copy()
    image.thumbnail(size, Image.ANTIALIAS)
    
    image = ImageOps.grayscale(image)
    median_filter(image)

    horizontal_hist = horizontal_histogram(image)
    vertical_hist = vertical_histogram(image)
    
    horizontal = [ y for y in find_local_minimums(horizontal_hist)]
    vertical = [ x for x in find_local_minimums(vertical_hist)] 

    call(['gnuplot', 'hole.plot'])
 
    holes_centers = list()
    threshold = 17.0
    d = 5
    pic = image.load()
    for y in vertical:
        for x in horizontal:
            finded = list()
            for y1 in range(y-d, y+d+1):
                temp = list()
                for x1 in range(x-d, x+d+1):
                    try:
                        temp.append(pic[x1, y1])
                    except:
                        temp.append(float('inf'))
                finded.append(temp)
            if compare(pat, finded) < threshold:
                holes_centers.append((x, y))
    print holes_centers

    # empieza lo de lab
    razon = image.size
    image = original_image
    razon = (float(image.size[0])/razon[0], float(image.size[1])/razon[1])
    draw = ImageDraw.Draw(image)
    
    for x in horizontal:
        x = int(x*razon[0])
        draw.line((x, 0, x, image.size[1]), fill=(0, 255, 0))

    for y in vertical:
        y = int(y*razon[1])
        draw.line((0, y, image.size[0], y), fill=(0, 0, 255))

    #termina lo de lab
    r = 3

    for x, y in holes_centers:
        x = x*razon[0]
        y = y*razon[1]
        draw.ellipse((x-r, y-r, x+r, y+r), fill=(255, 0, 0))

    image.save(output)

def main():
    before = time()
    hole_detection(argv[1])
    print "Tiempo de corrida:", (time() - before)

main()
